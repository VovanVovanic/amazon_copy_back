// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  email      String    @unique
  password   String
  name       String    @unique
  avatarPath String    @default("uploads/default-avatar.png") @map("avatar_path")
  phone      String    @default("")
  orders     Order[]
  reviews    Review[]
  isAdmin    Boolean   @default(false) @map("is_admin")
  favorites  Product[]
}

model Product {
  id            Int         @id @unique @default(autoincrement())
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  name          String      @unique
  slug          String      @unique
  description   String
  price         Int
  averageRating Int         @default(0)  @map("average_rating")
  images        String[]
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId    Int         @map("category_id")
  reviews       Review[]
  items         OrderItem[]
  user          User?       @relation(fields: [userId], references: [id])
  userId        Int?
}

model Order {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  status    EnumOrderStatus @default(PENDING)
  items     OrderItem[]
  total     Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int             @map("user_id")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  quantity  Int
  price     Int
  product   Product  @relation(fields: [productId], references: [id],onDelete: Cascade)
  order     Order    @relation(fields: [orderId], references: [id],onDelete: Cascade)
  productId Int      @map("product_id")
  orderId   Int      @map("order_id")

  @@map("order_item")
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  name      String    @unique
  slug      String    @unique
  products  Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  rating    Int
  text      String
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
